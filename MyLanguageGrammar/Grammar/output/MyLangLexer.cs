//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g 2016-10-24 08:35:31

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

   
    // turn of unreachable code warnings
    // turn off obsolete code warnings
    // turn off unused variable
    # pragma warning disable 0162,0618,0219 
    using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  MyLanguageImpl.Grammar 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class MyLangLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int ASSIGN=5;
	public const int BLOCKSTMT=6;
	public const int CALL=7;
	public const int COLON=8;
	public const int COMMA=9;
	public const int COMMENT=10;
	public const int DECLARE=11;
	public const int DIGIT=12;
	public const int DIVIDE=13;
	public const int DOT=14;
	public const int ELSE=15;
	public const int ENDP=16;
	public const int EQUALS=17;
	public const int EXPONENT=18;
	public const int FLOAT=19;
	public const int FUNCCALL=20;
	public const int FUNCDECL=21;
	public const int FUNCTION=22;
	public const int GT=23;
	public const int GTEQ=24;
	public const int IDENTIFIER=25;
	public const int IF=26;
	public const int INT=27;
	public const int LCLETTER=28;
	public const int LCURLY=29;
	public const int LPAREN=30;
	public const int LT=31;
	public const int LTEQ=32;
	public const int MINUS=33;
	public const int MULTIPLY=34;
	public const int NEGATE=35;
	public const int OR=36;
	public const int PLUS=37;
	public const int PROGDECL=38;
	public const int PROGRAM=39;
	public const int RCURLY=40;
	public const int RETURN=41;
	public const int RPAREN=42;
	public const int RUN=43;
	public const int RUNPROG=44;
	public const int SEMI=45;
	public const int THEN=46;
	public const int UCLETTER=47;
	public const int USCORE=48;
	public const int VAR=49;
	public const int WHILE=50;
	public const int WS=51;

    // delegates
    // delegators

	public MyLangLexer()
	{
		OnCreated();
	}

	public MyLangLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public MyLangLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ENDP();
	partial void LeaveRule_ENDP();

	// $ANTLR start "ENDP"
	[GrammarRule("ENDP")]
	private void mENDP()
	{
		EnterRule_ENDP();
		EnterRule("ENDP", 1);
		TraceIn("ENDP", 1);
		try
		{
			int _type = ENDP;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:30:7: ( 'end' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:30:9: 'end'
			{
			DebugLocation(30, 9);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENDP", 1);
			LeaveRule("ENDP", 1);
			LeaveRule_ENDP();
		}
	}
	// $ANTLR end "ENDP"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 2);
		TraceIn("ASSIGN", 2);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:32:9: ( ':=' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:32:11: ':='
			{
			DebugLocation(32, 11);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 2);
			LeaveRule("ASSIGN", 2);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 3);
		TraceIn("PLUS", 3);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:34:9: ( '+' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:34:11: '+'
			{
			DebugLocation(34, 11);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 3);
			LeaveRule("PLUS", 3);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 4);
		TraceIn("MINUS", 4);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:36:9: ( '-' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:36:11: '-'
			{
			DebugLocation(36, 11);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 4);
			LeaveRule("MINUS", 4);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MULTIPLY();
	partial void LeaveRule_MULTIPLY();

	// $ANTLR start "MULTIPLY"
	[GrammarRule("MULTIPLY")]
	private void mMULTIPLY()
	{
		EnterRule_MULTIPLY();
		EnterRule("MULTIPLY", 5);
		TraceIn("MULTIPLY", 5);
		try
		{
			int _type = MULTIPLY;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:38:9: ( '*' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:38:11: '*'
			{
			DebugLocation(38, 11);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULTIPLY", 5);
			LeaveRule("MULTIPLY", 5);
			LeaveRule_MULTIPLY();
		}
	}
	// $ANTLR end "MULTIPLY"

	partial void EnterRule_DIVIDE();
	partial void LeaveRule_DIVIDE();

	// $ANTLR start "DIVIDE"
	[GrammarRule("DIVIDE")]
	private void mDIVIDE()
	{
		EnterRule_DIVIDE();
		EnterRule("DIVIDE", 6);
		TraceIn("DIVIDE", 6);
		try
		{
			int _type = DIVIDE;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:40:9: ( '/' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:40:11: '/'
			{
			DebugLocation(40, 11);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIVIDE", 6);
			LeaveRule("DIVIDE", 6);
			LeaveRule_DIVIDE();
		}
	}
	// $ANTLR end "DIVIDE"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 7);
		TraceIn("LPAREN", 7);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:42:9: ( '(' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:42:11: '('
			{
			DebugLocation(42, 11);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 7);
			LeaveRule("LPAREN", 7);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 8);
		TraceIn("RPAREN", 8);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:44:9: ( ')' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:44:11: ')'
			{
			DebugLocation(44, 11);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 8);
			LeaveRule("RPAREN", 8);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 9);
		TraceIn("EQUALS", 9);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:46:8: ( '==' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:46:10: '=='
			{
			DebugLocation(46, 10);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 9);
			LeaveRule("EQUALS", 9);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 10);
		TraceIn("GT", 10);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:48:4: ( '>' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:48:6: '>'
			{
			DebugLocation(48, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 10);
			LeaveRule("GT", 10);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 11);
		TraceIn("LT", 11);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:50:4: ( '<' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:50:6: '<'
			{
			DebugLocation(50, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 11);
			LeaveRule("LT", 11);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_LTEQ();
	partial void LeaveRule_LTEQ();

	// $ANTLR start "LTEQ"
	[GrammarRule("LTEQ")]
	private void mLTEQ()
	{
		EnterRule_LTEQ();
		EnterRule("LTEQ", 12);
		TraceIn("LTEQ", 12);
		try
		{
			int _type = LTEQ;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:52:6: ( '<=' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:52:8: '<='
			{
			DebugLocation(52, 8);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LTEQ", 12);
			LeaveRule("LTEQ", 12);
			LeaveRule_LTEQ();
		}
	}
	// $ANTLR end "LTEQ"

	partial void EnterRule_GTEQ();
	partial void LeaveRule_GTEQ();

	// $ANTLR start "GTEQ"
	[GrammarRule("GTEQ")]
	private void mGTEQ()
	{
		EnterRule_GTEQ();
		EnterRule("GTEQ", 13);
		TraceIn("GTEQ", 13);
		try
		{
			int _type = GTEQ;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:54:6: ( '=>' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:54:8: '=>'
			{
			DebugLocation(54, 8);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GTEQ", 13);
			LeaveRule("GTEQ", 13);
			LeaveRule_GTEQ();
		}
	}
	// $ANTLR end "GTEQ"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 14);
		TraceIn("OR", 14);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:56:9: ( 'OR' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:56:11: 'OR'
			{
			DebugLocation(56, 11);
			Match("OR"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 14);
			LeaveRule("OR", 14);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 15);
		TraceIn("AND", 15);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:58:9: ( 'AND' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:58:11: 'AND'
			{
			DebugLocation(58, 11);
			Match("AND"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 15);
			LeaveRule("AND", 15);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 16);
		TraceIn("WHILE", 16);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:60:9: ( 'while' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:60:11: 'while'
			{
			DebugLocation(60, 11);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 16);
			LeaveRule("WHILE", 16);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_DECLARE();
	partial void LeaveRule_DECLARE();

	// $ANTLR start "DECLARE"
	[GrammarRule("DECLARE")]
	private void mDECLARE()
	{
		EnterRule_DECLARE();
		EnterRule("DECLARE", 17);
		TraceIn("DECLARE", 17);
		try
		{
			int _type = DECLARE;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:62:9: ( 'declare' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:62:11: 'declare'
			{
			DebugLocation(62, 11);
			Match("declare"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DECLARE", 17);
			LeaveRule("DECLARE", 17);
			LeaveRule_DECLARE();
		}
	}
	// $ANTLR end "DECLARE"

	partial void EnterRule_PROGRAM();
	partial void LeaveRule_PROGRAM();

	// $ANTLR start "PROGRAM"
	[GrammarRule("PROGRAM")]
	private void mPROGRAM()
	{
		EnterRule_PROGRAM();
		EnterRule("PROGRAM", 18);
		TraceIn("PROGRAM", 18);
		try
		{
			int _type = PROGRAM;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:64:9: ( 'program' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:64:11: 'program'
			{
			DebugLocation(64, 11);
			Match("program"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROGRAM", 18);
			LeaveRule("PROGRAM", 18);
			LeaveRule_PROGRAM();
		}
	}
	// $ANTLR end "PROGRAM"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 19);
		TraceIn("FUNCTION", 19);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:66:10: ( 'function' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:66:12: 'function'
			{
			DebugLocation(66, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 19);
			LeaveRule("FUNCTION", 19);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 20);
		TraceIn("IF", 20);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:68:4: ( 'if' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:68:6: 'if'
			{
			DebugLocation(68, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 20);
			LeaveRule("IF", 20);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_RUN();
	partial void LeaveRule_RUN();

	// $ANTLR start "RUN"
	[GrammarRule("RUN")]
	private void mRUN()
	{
		EnterRule_RUN();
		EnterRule("RUN", 21);
		TraceIn("RUN", 21);
		try
		{
			int _type = RUN;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:70:5: ( 'run' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:70:7: 'run'
			{
			DebugLocation(70, 7);
			Match("run"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RUN", 21);
			LeaveRule("RUN", 21);
			LeaveRule_RUN();
		}
	}
	// $ANTLR end "RUN"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 22);
		TraceIn("THEN", 22);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:72:6: ( 'then' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:72:8: 'then'
			{
			DebugLocation(72, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 22);
			LeaveRule("THEN", 22);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 23);
		TraceIn("ELSE", 23);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:74:6: ( 'else' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:74:8: 'else'
			{
			DebugLocation(74, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 23);
			LeaveRule("ELSE", 23);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_CALL();
	partial void LeaveRule_CALL();

	// $ANTLR start "CALL"
	[GrammarRule("CALL")]
	private void mCALL()
	{
		EnterRule_CALL();
		EnterRule("CALL", 24);
		TraceIn("CALL", 24);
		try
		{
			int _type = CALL;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:76:6: ( 'call' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:76:8: 'call'
			{
			DebugLocation(76, 8);
			Match("call"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CALL", 24);
			LeaveRule("CALL", 24);
			LeaveRule_CALL();
		}
	}
	// $ANTLR end "CALL"

	partial void EnterRule_RETURN();
	partial void LeaveRule_RETURN();

	// $ANTLR start "RETURN"
	[GrammarRule("RETURN")]
	private void mRETURN()
	{
		EnterRule_RETURN();
		EnterRule("RETURN", 25);
		TraceIn("RETURN", 25);
		try
		{
			int _type = RETURN;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:78:8: ( 'return' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:78:10: 'return'
			{
			DebugLocation(78, 10);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RETURN", 25);
			LeaveRule("RETURN", 25);
			LeaveRule_RETURN();
		}
	}
	// $ANTLR end "RETURN"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 26);
		TraceIn("LCURLY", 26);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:80:8: ( '{' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:80:10: '{'
			{
			DebugLocation(80, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 26);
			LeaveRule("LCURLY", 26);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 27);
		TraceIn("RCURLY", 27);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:82:8: ( '}' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:82:10: '}'
			{
			DebugLocation(82, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 27);
			LeaveRule("RCURLY", 27);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 28);
		TraceIn("SEMI", 28);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:84:5: ( ';' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:84:7: ';'
			{
			DebugLocation(84, 7);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 28);
			LeaveRule("SEMI", 28);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 29);
		TraceIn("WS", 29);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:86:4: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:86:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			{
			DebugLocation(86, 6);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:86:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='\t' && LA1_0<='\n')||(LA1_0>='\f' && LA1_0<='\r')||LA1_0==' '))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
					{
					DebugLocation(86, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(86, 41);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 29);
			LeaveRule("WS", 29);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 30);
		TraceIn("COMMENT", 30);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:89:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='/'))
			{
				int LA5_1 = input.LA(2);

				if ((LA5_1=='/'))
				{
					alt5 = 1;
				}
				else if ((LA5_1=='*'))
				{
					alt5 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:89:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(89, 9);
				Match("//"); 

				DebugLocation(89, 14);
				// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:89:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if (((LA2_0>='\u0000' && LA2_0<='\t')||(LA2_0>='\u000B' && LA2_0<='\f')||(LA2_0>='\u000E' && LA2_0<='\uFFFF')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
						{
						DebugLocation(89, 14);
						input.Consume();


						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(89, 28);
				// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:89:28: ( '\\r' )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0=='\r'))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:89:28: '\\r'
					{
					DebugLocation(89, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(89, 34);
				Match('\n'); 
				DebugLocation(89, 39);
				_channel=Hidden;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:90:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(90, 9);
				Match("/*"); 

				DebugLocation(90, 14);
				// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:90:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0=='*'))
					{
						int LA4_1 = input.LA(2);

						if ((LA4_1=='/'))
						{
							alt4 = 2;
						}
						else if (((LA4_1>='\u0000' && LA4_1<='.')||(LA4_1>='0' && LA4_1<='\uFFFF')))
						{
							alt4 = 1;
						}


					}
					else if (((LA4_0>='\u0000' && LA4_0<=')')||(LA4_0>='+' && LA4_0<='\uFFFF')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:90:42: .
						{
						DebugLocation(90, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(90, 47);
				Match("*/"); 

				DebugLocation(90, 52);
				_channel=Hidden;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 30);
			LeaveRule("COMMENT", 30);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 31);
		TraceIn("INT", 31);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:93:9: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:93:11: ( DIGIT )+
			{
			DebugLocation(93, 11);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:93:11: ( DIGIT )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
					{
					DebugLocation(93, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 31);
			LeaveRule("INT", 31);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 32);
		TraceIn("FLOAT", 32);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:96:5: ( ( DIGIT )+ DOT ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:96:9: ( DIGIT )+ DOT ( DIGIT )+
			{
			DebugLocation(96, 9);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:96:9: ( DIGIT )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='0' && LA7_0<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
					{
					DebugLocation(96, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(96, 16);
			mDOT(); 
			DebugLocation(96, 20);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:96:20: ( DIGIT )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
					{
					DebugLocation(96, 20);
					input.Consume();


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 32);
			LeaveRule("FLOAT", 32);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 33);
		TraceIn("IDENTIFIER", 33);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:107:13: ( ( LCLETTER | UCLETTER | USCORE ) ( LCLETTER | UCLETTER | DIGIT | USCORE )* )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:107:17: ( LCLETTER | UCLETTER | USCORE ) ( LCLETTER | UCLETTER | DIGIT | USCORE )*
			{
			DebugLocation(107, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(107, 44);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:107:44: ( LCLETTER | UCLETTER | DIGIT | USCORE )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>='0' && LA9_0<='9')||(LA9_0>='A' && LA9_0<='Z')||LA9_0=='_'||(LA9_0>='a' && LA9_0<='z')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
					{
					DebugLocation(107, 44);
					input.Consume();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 33);
			LeaveRule("IDENTIFIER", 33);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 34);
		TraceIn("COMMA", 34);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:110:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:110:9: ','
			{
			DebugLocation(110, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 34);
			LeaveRule("COMMA", 34);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 35);
		TraceIn("COLON", 35);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:113:6: ( ':' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:113:8: ':'
			{
			DebugLocation(113, 8);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 35);
			LeaveRule("COLON", 35);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 36);
		TraceIn("EXPONENT", 36);
		try
		{
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:116:10: ( ( 'e' | 'E' ) ( PLUS | MINUS )? ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:116:12: ( 'e' | 'E' ) ( PLUS | MINUS )? ( DIGIT )+
			{
			DebugLocation(116, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(116, 22);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:116:22: ( PLUS | MINUS )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='+'||LA10_0=='-'))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
				{
				DebugLocation(116, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(116, 36);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:116:36: ( DIGIT )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>='0' && LA11_0<='9')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
					{
					DebugLocation(116, 36);
					input.Consume();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 36);
			LeaveRule("EXPONENT", 36);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 37);
		TraceIn("DOT", 37);
		try
		{
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:119:9: ( '.' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:119:11: '.'
			{
			DebugLocation(119, 11);
			Match('.'); 

			}

		}
		finally
		{
			TraceOut("DOT", 37);
			LeaveRule("DOT", 37);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_USCORE();
	partial void LeaveRule_USCORE();

	// $ANTLR start "USCORE"
	[GrammarRule("USCORE")]
	private void mUSCORE()
	{
		EnterRule_USCORE();
		EnterRule("USCORE", 38);
		TraceIn("USCORE", 38);
		try
		{
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:122:9: ( '_' )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:122:11: '_'
			{
			DebugLocation(122, 11);
			Match('_'); 

			}

		}
		finally
		{
			TraceOut("USCORE", 38);
			LeaveRule("USCORE", 38);
			LeaveRule_USCORE();
		}
	}
	// $ANTLR end "USCORE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 39);
		TraceIn("DIGIT", 39);
		try
		{
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:125:9: ( ( '0' .. '9' ) )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
			{
			DebugLocation(125, 9);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 39);
			LeaveRule("DIGIT", 39);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_LCLETTER();
	partial void LeaveRule_LCLETTER();

	// $ANTLR start "LCLETTER"
	[GrammarRule("LCLETTER")]
	private void mLCLETTER()
	{
		EnterRule_LCLETTER();
		EnterRule("LCLETTER", 40);
		TraceIn("LCLETTER", 40);
		try
		{
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:128:9: ( ( 'a' .. 'z' ) )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
			{
			DebugLocation(128, 9);
			if ((input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LCLETTER", 40);
			LeaveRule("LCLETTER", 40);
			LeaveRule_LCLETTER();
		}
	}
	// $ANTLR end "LCLETTER"

	partial void EnterRule_UCLETTER();
	partial void LeaveRule_UCLETTER();

	// $ANTLR start "UCLETTER"
	[GrammarRule("UCLETTER")]
	private void mUCLETTER()
	{
		EnterRule_UCLETTER();
		EnterRule("UCLETTER", 41);
		TraceIn("UCLETTER", 41);
		try
		{
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:131:9: ( ( 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:
			{
			DebugLocation(131, 9);
			if ((input.LA(1)>='A' && input.LA(1)<='Z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("UCLETTER", 41);
			LeaveRule("UCLETTER", 41);
			LeaveRule_UCLETTER();
		}
	}
	// $ANTLR end "UCLETTER"

	public override void mTokens()
	{
		// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:8: ( ENDP | ASSIGN | PLUS | MINUS | MULTIPLY | DIVIDE | LPAREN | RPAREN | EQUALS | GT | LT | LTEQ | GTEQ | OR | AND | WHILE | DECLARE | PROGRAM | FUNCTION | IF | RUN | THEN | ELSE | CALL | RETURN | LCURLY | RCURLY | SEMI | WS | COMMENT | INT | FLOAT | IDENTIFIER | COMMA | COLON )
		int alt12=35;
		try { DebugEnterDecision(12, false);
		try
		{
			alt12 = dfa12.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(12); }
		switch (alt12)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:10: ENDP
			{
			DebugLocation(1, 10);
			mENDP(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:15: ASSIGN
			{
			DebugLocation(1, 15);
			mASSIGN(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:22: PLUS
			{
			DebugLocation(1, 22);
			mPLUS(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:27: MINUS
			{
			DebugLocation(1, 27);
			mMINUS(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:33: MULTIPLY
			{
			DebugLocation(1, 33);
			mMULTIPLY(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:42: DIVIDE
			{
			DebugLocation(1, 42);
			mDIVIDE(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:49: LPAREN
			{
			DebugLocation(1, 49);
			mLPAREN(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:56: RPAREN
			{
			DebugLocation(1, 56);
			mRPAREN(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:63: EQUALS
			{
			DebugLocation(1, 63);
			mEQUALS(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:70: GT
			{
			DebugLocation(1, 70);
			mGT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:73: LT
			{
			DebugLocation(1, 73);
			mLT(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:76: LTEQ
			{
			DebugLocation(1, 76);
			mLTEQ(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:81: GTEQ
			{
			DebugLocation(1, 81);
			mGTEQ(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:86: OR
			{
			DebugLocation(1, 86);
			mOR(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:89: AND
			{
			DebugLocation(1, 89);
			mAND(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:93: WHILE
			{
			DebugLocation(1, 93);
			mWHILE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:99: DECLARE
			{
			DebugLocation(1, 99);
			mDECLARE(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:107: PROGRAM
			{
			DebugLocation(1, 107);
			mPROGRAM(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:115: FUNCTION
			{
			DebugLocation(1, 115);
			mFUNCTION(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:124: IF
			{
			DebugLocation(1, 124);
			mIF(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:127: RUN
			{
			DebugLocation(1, 127);
			mRUN(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:131: THEN
			{
			DebugLocation(1, 131);
			mTHEN(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:136: ELSE
			{
			DebugLocation(1, 136);
			mELSE(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:141: CALL
			{
			DebugLocation(1, 141);
			mCALL(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:146: RETURN
			{
			DebugLocation(1, 146);
			mRETURN(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:153: LCURLY
			{
			DebugLocation(1, 153);
			mLCURLY(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:160: RCURLY
			{
			DebugLocation(1, 160);
			mRCURLY(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:167: SEMI
			{
			DebugLocation(1, 167);
			mSEMI(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:172: WS
			{
			DebugLocation(1, 172);
			mWS(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:175: COMMENT
			{
			DebugLocation(1, 175);
			mCOMMENT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:183: INT
			{
			DebugLocation(1, 183);
			mINT(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:187: FLOAT
			{
			DebugLocation(1, 187);
			mFLOAT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:193: IDENTIFIER
			{
			DebugLocation(1, 193);
			mIDENTIFIER(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:204: COMMA
			{
			DebugLocation(1, 204);
			mCOMMA(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\development\\cvsout\\MyLanguage\\MyLanguageGrammar\\Grammar\\MyLangLexer.g:1:210: COLON
			{
			DebugLocation(1, 210);
			mCOLON(); 

			}
			break;

		}

	}


	#region DFA
	DFA12 dfa12;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa12 = new DFA12(this);
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x1\xFFFF\x1\x1B\x1\x20\x3\xFFFF\x1\x22\x4\xFFFF\x1\x26\xA\x1B\x4\xFFFF"+
			"\x1\x32\x2\xFFFF\x2\x1B\x8\xFFFF\x1\x36\x5\x1B\x1\x3C\x4\x1B\x2\xFFFF"+
			"\x1\x41\x1\x1B\x1\xFFFF\x1\x43\x4\x1B\x1\xFFFF\x1\x48\x3\x1B\x1\xFFFF"+
			"\x1\x4C\x1\xFFFF\x4\x1B\x1\xFFFF\x1\x1B\x1\x52\x1\x53\x1\xFFFF\x1\x54"+
			"\x4\x1B\x3\xFFFF\x3\x1B\x1\x5C\x1\x5D\x1\x5E\x1\x1B\x3\xFFFF\x1\x60\x1"+
			"\xFFFF";
		private const string DFA12_eofS =
			"\x61\xFFFF";
		private const string DFA12_minS =
			"\x1\x9\x1\x6C\x1\x3D\x3\xFFFF\x1\x2A\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x3D"+
			"\x1\x52\x1\x4E\x1\x68\x1\x65\x1\x72\x1\x75\x1\x66\x1\x65\x1\x68\x1\x61"+
			"\x4\xFFFF\x1\x2E\x2\xFFFF\x1\x64\x1\x73\x8\xFFFF\x1\x30\x1\x44\x1\x69"+
			"\x1\x63\x1\x6F\x1\x6E\x1\x30\x1\x6E\x1\x74\x1\x65\x1\x6C\x2\xFFFF\x1"+
			"\x30\x1\x65\x1\xFFFF\x1\x30\x2\x6C\x1\x67\x1\x63\x1\xFFFF\x1\x30\x1\x75"+
			"\x1\x6E\x1\x6C\x1\xFFFF\x1\x30\x1\xFFFF\x1\x65\x1\x61\x1\x72\x1\x74\x1"+
			"\xFFFF\x1\x72\x2\x30\x1\xFFFF\x1\x30\x1\x72\x1\x61\x1\x69\x1\x6E\x3\xFFFF"+
			"\x1\x65\x1\x6D\x1\x6F\x3\x30\x1\x6E\x3\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA12_maxS =
			"\x1\x7D\x1\x6E\x1\x3D\x3\xFFFF\x1\x2F\x2\xFFFF\x1\x3E\x1\xFFFF\x1\x3D"+
			"\x1\x52\x1\x4E\x1\x68\x1\x65\x1\x72\x1\x75\x1\x66\x1\x75\x1\x68\x1\x61"+
			"\x4\xFFFF\x1\x39\x2\xFFFF\x1\x64\x1\x73\x8\xFFFF\x1\x7A\x1\x44\x1\x69"+
			"\x1\x63\x1\x6F\x1\x6E\x1\x7A\x1\x6E\x1\x74\x1\x65\x1\x6C\x2\xFFFF\x1"+
			"\x7A\x1\x65\x1\xFFFF\x1\x7A\x2\x6C\x1\x67\x1\x63\x1\xFFFF\x1\x7A\x1\x75"+
			"\x1\x6E\x1\x6C\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x65\x1\x61\x1\x72\x1\x74\x1"+
			"\xFFFF\x1\x72\x2\x7A\x1\xFFFF\x1\x7A\x1\x72\x1\x61\x1\x69\x1\x6E\x3\xFFFF"+
			"\x1\x65\x1\x6D\x1\x6F\x3\x7A\x1\x6E\x3\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA12_acceptS =
			"\x3\xFFFF\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x7\x1\x8\x1\xFFFF\x1\xA\xB\xFFFF"+
			"\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\xFFFF\x1\x21\x1\x22\x2\xFFFF\x1\x2\x1"+
			"\x23\x1\x1E\x1\x6\x1\x9\x1\xD\x1\xC\x1\xB\xB\xFFFF\x1\x1F\x1\x20\x2\xFFFF"+
			"\x1\xE\x5\xFFFF\x1\x14\x4\xFFFF\x1\x1\x1\xFFFF\x1\xF\x4\xFFFF\x1\x15"+
			"\x3\xFFFF\x1\x17\x5\xFFFF\x1\x16\x1\x18\x1\x10\x7\xFFFF\x1\x19\x1\x11"+
			"\x1\x12\x1\xFFFF\x1\x13";
		private const string DFA12_specialS =
			"\x61\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x2\x19\x1\xFFFF\x2\x19\x12\xFFFF\x1\x19\x7\xFFFF\x1\x7\x1\x8\x1\x5"+
				"\x1\x3\x1\x1C\x1\x4\x1\xFFFF\x1\x6\xA\x1A\x1\x2\x1\x18\x1\xB\x1\x9\x1"+
				"\xA\x2\xFFFF\x1\xD\xD\x1B\x1\xC\xB\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x2\x1B"+
				"\x1\x15\x1\xF\x1\x1\x1\x11\x2\x1B\x1\x12\x6\x1B\x1\x10\x1\x1B\x1\x13"+
				"\x1\x1B\x1\x14\x2\x1B\x1\xE\x3\x1B\x1\x16\x1\xFFFF\x1\x17",
				"\x1\x1E\x1\xFFFF\x1\x1D",
				"\x1\x1F",
				"",
				"",
				"",
				"\x1\x21\x4\xFFFF\x1\x21",
				"",
				"",
				"\x1\x23\x1\x24",
				"",
				"\x1\x25",
				"\x1\x27",
				"\x1\x28",
				"\x1\x29",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2F\xF\xFFFF\x1\x2E",
				"\x1\x30",
				"\x1\x31",
				"",
				"",
				"",
				"",
				"\x1\x33\x1\xFFFF\xA\x1A",
				"",
				"",
				"\x1\x34",
				"\x1\x35",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\x1\x37",
				"\x1\x38",
				"\x1\x39",
				"\x1\x3A",
				"\x1\x3B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\x1\x3D",
				"\x1\x3E",
				"\x1\x3F",
				"\x1\x40",
				"",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\x1\x42",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"\x1\x47",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4B",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"",
				"\x1\x51",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\x1\x55",
				"\x1\x56",
				"\x1\x57",
				"\x1\x58",
				"",
				"",
				"",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				"\x1\x5F",
				"",
				"",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x4\xFFFF\x1\x1B\x1\xFFFF\x1A\x1B",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( ENDP | ASSIGN | PLUS | MINUS | MULTIPLY | DIVIDE | LPAREN | RPAREN | EQUALS | GT | LT | LTEQ | GTEQ | OR | AND | WHILE | DECLARE | PROGRAM | FUNCTION | IF | RUN | THEN | ELSE | CALL | RETURN | LCURLY | RCURLY | SEMI | WS | COMMENT | INT | FLOAT | IDENTIFIER | COMMA | COLON );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  MyLanguageImpl.Grammar 
